// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimalGameAPI.Data;

#nullable disable

namespace MinimalGameAPI.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20230817115051_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MinimalGameDataLibrary.PlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MinimalGameDataLibrary.PlayerData", b =>
                {
                    b.OwnsOne("MinimalGameDataLibrary.Vec3Data", "CoinPosition", b1 =>
                        {
                            b1.Property<int>("PlayerDataId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("PlayerDataId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerDataId");
                        });

                    b.OwnsOne("MinimalGameDataLibrary.Vec3Data", "PlayerPosition", b1 =>
                        {
                            b1.Property<int>("PlayerDataId")
                                .HasColumnType("int");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.Property<float>("Z")
                                .HasColumnType("real");

                            b1.HasKey("PlayerDataId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerDataId");
                        });

                    b.Navigation("CoinPosition");

                    b.Navigation("PlayerPosition");
                });
#pragma warning restore 612, 618
        }
    }
}
